# Copyright (c) 2013, Daynix Computing LTD (www.daynix.com)
# All rights reserved.
#
# Maintained by bricklets@daynix.com
#
# This file is a part of Bricklets library, see "Bricklets" page
# on www.daynix.com for more.
#
# This code is licensed under standard 3-clause BSD license.
# See file LICENSE supplied with this package for the full license text.

#Settings file for HCK setup

#Setup ID
UNIQUE_ID=11

#HCK root
HCK_ROOT=`dirname $0`

#QEMU PATH
QEMU_BIN=/bin/qemu-kvm

#TEST DEVICE TYPE
TEST_DEV_TYPE=network
#TEST_DEV_TYPE=bootstorage
#TEST_DEV_TYPE=storage
#TEST_DEV_TYPE=balloon
#TEST_DEV_TYPE=serial

#VNC ports
PORT_BASE=`expr ${UNIQUE_ID} '*' 3`
STUDIO_PORT=`expr ${PORT_BASE} + 0`
CLIENT1_PORT=`expr ${PORT_BASE} + 1`
CLIENT2_PORT=`expr ${PORT_BASE} + 2`

#VIDEO
VIDEO_TYPE=VNC
#VIDEO_TYPE=SPICE

#TEST NETWORK BACKEND
TEST_NET_TYPE=bridge
#TEST_NET_TYPE=OVS

#BRIDGES
WORLD_BR_NAME=whqlbr0
CTRL_BR_NAME=ctrltestbr_${UNIQUE_ID}
TEST_BR_NAME=hcktestbr_${UNIQUE_ID}

#IMAGES
IMAGES_DIR=`dirname ${HCK_ROOT}`/images
STUDIO_IMAGE=${IMAGES_DIR}/HCK_Studio_WS2008R2_SP1.img
CLIENT1_IMAGE=${IMAGES_DIR}/HCK_Client1_WS2008R2_SP1.img
CLIENT2_IMAGE=${IMAGES_DIR}/HCK_Client2_WS2008R2_SP1.img

#RESOURCES
CLIENT1_CPUS=2
CLIENT2_CPUS=2
CLIENT_MEMORY=1G
WORLD_NET_DEVICE=e1000
CTRL_NET_DEVICE=e1000

#MISC
VHOST_STATE=off
SNAPSHOT=off
UNSAFE_CACHE=off

#EXTRA PARAMS
#STUDIO_EXTRA="-cdrom /non/existing/path/en_windows_server_2008_r2_with_sp1_x64_dvd_617601.iso"
#CLIENT1_EXTRA="-cdrom /non/existing/path/en_windows_server_2008_r2_with_sp1_x64_dvd_617601.iso"
#CLIENT2_EXTRA="-cdrom /non/existing/path/en_windows_server_2008_r2_with_sp1_x64_dvd_617601.iso"

#BIOS from the latest QEMU is required for power management support
#CLIENT1_EXTRA="-bios /non/existing/path/qemu/pc-bios/bios.bin"
#CLIENT2_EXTRA="-bios /non/existing/path/qemu/pc-bios/bios.bin"

#UTILITIES
test x"${SNAPSHOT}" = xon && SNAPSHOT_OPTION="-snapshot"
test x"${UNSAFE_CACHE}" = xon && DRIVE_CACHE_OPTION=",cache=unsafe"

test x"${VIDEO_TYPE}" = xVNC && \
    GRAPHICS_STUDIO="-vnc :${STUDIO_PORT}" && \
    GRAPHICS_CLIENT1="-vnc :${CLIENT1_PORT}" && \
    GRAPHICS_CLIENT2="-vnc :${CLIENT2_PORT}"

test x"${VIDEO_TYPE}" = xSPICE && \
    GRAPHICS_STUDIO="-spice port=${STUDIO_PORT},disable-ticketing -vga qxl" && \
    GRAPHICS_CLIENT1="-spice port=${CLIENT1_PORT},disable-ticketing -vga qxl" && \
    GRAPHICS_CLIENT2="-spice port=${CLIENT2_PORT},disable-ticketing -vga qxl"

remove_bridges() {
  case $TEST_NET_TYPE in
  bridge)
     ifconfig ${TEST_BR_NAME} down
     brctl delbr ${TEST_BR_NAME}
     ;;
  OVS)
     ovs-vsctl del-br ${TEST_BR_NAME}
     ;;
  esac

 ifconfig ${CTRL_BR_NAME} down
 brctl delbr ${CTRL_BR_NAME}
}

create_bridges() {
  case $TEST_NET_TYPE in
  bridge)
     brctl addbr ${TEST_BR_NAME} 2>&1 | grep -v "already exists"
     ifconfig ${TEST_BR_NAME} up
     ;;
  OVS)
     ovs-vsctl add-br ${TEST_BR_NAME}
     ;;
  esac

 brctl addbr ${CTRL_BR_NAME} 2>&1 | grep -v "already exists"
 ifconfig ${CTRL_BR_NAME} up
}

enslave_iface() {
BRNAME=$1
IFNAME=$2

ifconfig ${IFNAME} promisc 0.0.0.0 &&
brctl addif ${BRNAME} ${IFNAME} &&
ethtool -K ${IFNAME} tx off
}

enslave_test_iface() {
  BRNAME=$1
  IFNAME=$2

  ifconfig ${IFNAME} promisc 0.0.0.0 &&

  case $TEST_NET_TYPE in
  bridge)
     brctl addif ${BRNAME} ${IFNAME} ||
     echo ERROR: Failed to enslave ${IFNAME} to ${BRNAME} bridge
     ;;
  OVS)
     { ovs-vsctl add-port ${BRNAME} ${IFNAME} &&
     ovs-vsctl set port ${IFNAME} other-config:priority-tags=true; } ||
     echo ERROR: Failed to enslave ${IFNAME} to ${BRNAME} ovs-bridge
     ;;
  esac

  ethtool -K ${IFNAME} tx off
}

dump_config()
{
cat <<END
Setup configuration
  Setup ID................... ${UNIQUE_ID}
  Test suite type............ ${TEST_DEV_TYPE}
  Graphics................... ${VIDEO_TYPE}
  Test network backend....... ${TEST_NET_TYPE}
  Studio VM display port..... ${STUDIO_PORT}
  Client 1 display port...... ${CLIENT1_PORT}
  Client 2 display port...... ${CLIENT2_PORT}
  QEMU binary................ ${QEMU_BIN}
  Studio VM image............ ${STUDIO_IMAGE}
  Client 1 VM Image.......... ${CLIENT1_IMAGE}
  Client 2 VM Image.......... ${CLIENT2_IMAGE}
  Client 1 VCPUs............. ${CLIENT1_CPUS}
  Client 2 VCPUs............. ${CLIENT2_CPUS}
  Memory for each client..... ${CLIENT_MEMORY}
  World network device....... ${WORLD_NET_DEVICE}
  Control network device..... ${CTRL_NET_DEVICE}
  VHOST...................... ${VHOST_STATE}
  Snapshot mode.............. ${SNAPSHOT}
END
}

LOOPRUN_FILE=`dirname $0`/.hck_stop_looped_vms.flag

loop_run_vm() {
  while true; do
    $*
    test -f $LOOPRUN_FILE && return 0
    sleep 2
  done
}

loop_run_stop() {
  touch $LOOPRUN_FILE
}

loop_run_reset() {
  rm -f $LOOPRUN_FILE
}
